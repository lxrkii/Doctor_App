import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
import logging
from backend.db import init_db
from bot.handlers import router as user_router
from bot.reminders import reminders_worker
from backend.models.user import User
from backend.models.wear_session import WearSession
from datetime import datetime, date

API_TOKEN = os.getenv("BOT_TOKEN", "8174579900:AAHoDQb8bHjfamt4g8vEGnIs_j8eoObY3fg")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä
# dp.include_router(user_router)
logger.info("Router included successfully")
# logger.info(f"Router handlers: {len(user_router.message.handlers)}")
# for i, handler in enumerate(user_router.message.handlers):
#     logger.info(f"Handler {i}: {handler.callback.__name__}")

def get_main_keyboard():
    """–°–æ–∑–¥–∞—ë—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥–ª–∞–≤–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üü¢ –ù–∞—á–∞—Ç—å –Ω–æ—à–µ–Ω–∏–µ", callback_data="start_wear"),
            InlineKeyboardButton(text="üî¥ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ—à–µ–Ω–∏–µ", callback_data="stop_wear")
        ],
        [
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="today"),
            InlineKeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é", callback_data="stats")
        ],
        [
            InlineKeyboardButton(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
            InlineKeyboardButton(text="üîÑ –°–º–µ–Ω–∏—Ç—å –∫–∞–ø–ø—É", callback_data="next")
        ],
        [
            InlineKeyboardButton(text="üí° –°–æ–≤–µ—Ç—ã", callback_data="tips"),
            InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help")
        ],
        [
            InlineKeyboardButton(text="üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")
        ]
    ])
    return keyboard

def get_wear_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–æ—à–µ–Ω–∏–µ–º"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üî¥ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ—à–µ–Ω–∏–µ", callback_data="stop_wear"),
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="today")
        ],
        [
            InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        ]
    ])
    return keyboard

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ö—ç–Ω–¥–ª–µ—Ä
@dp.message(Command("test"))
async def test_handler(message: Message):
    logger.info("TEST HANDLER WORKING!")
    await message.answer("–¢–µ—Å—Ç–æ–≤—ã–π —Ö—ç–Ω–¥–ª–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!")

# –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@dp.message(Command("profile"))
async def profile_test_handler(message: Message):
    logger.info("PROFILE TEST HANDLER WORKING!")
    if message.from_user is None:
        return
    telegram_id = message.from_user.id
    user = await User.filter(telegram_id=telegram_id).first()
    if not user:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")
        return
    text = f"–ü—Ä–æ—Ñ–∏–ª—å:\n–ò–º—è: {user.name or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n–ù–æ–º–µ—Ä —ç–ª–∞–π–Ω–µ—Ä–∞: {user.current_aligner_number}"
    await message.answer(text)

@dp.message(Command("start"))
async def cmd_start(message: Message):
    if message.from_user is None:
        return
    telegram_id = message.from_user.id
    user = await User.filter(telegram_id=telegram_id).first()
    if not user:
        user = await User.create(
            telegram_id=telegram_id,
            name=message.from_user.first_name or None,
            current_aligner_number=1,
            last_aligner_change_date=message.date.date(),
            aligner_change_interval_days=14,
            daily_goal_hours=22
        )
        welcome_text = (
            "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>–≠–ª–∞–π–Ω–µ—Ä–ö–æ–Ω—Ç—Ä–æ–ª—å</b>!\n\n"
            "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤—Ä–µ–º—è –Ω–æ—à–µ–Ω–∏—è —ç–ª–∞–π–Ω–µ—Ä–æ–≤ –∏ –¥–æ—Å—Ç–∏–≥–∞—Ç—å –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        await message.answer(welcome_text, reply_markup=get_main_keyboard(), parse_mode="HTML")
    else:
        welcome_text = (
            f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.name or '–ø–∞—Ü–∏–µ–Ω—Ç'}!\n\n"
            "–ì–æ—Ç–æ–≤—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ª–µ—á–µ–Ω–∏–µ? –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        await message.answer(welcome_text, reply_markup=get_main_keyboard(), parse_mode="HTML")

# –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ /name –∏ set_name_if_needed
# (–û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Ñ–∏–ª—å –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ)

@dp.message(Command("start_wear"))
async def cmd_start_wear(message: Message):
    if message.from_user is None:
        return
    telegram_id = message.from_user.id
    user = await User.filter(telegram_id=telegram_id).first()
    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start.")
        return
    open_session = await WearSession.filter(user=user, end_time=None).first()
    if open_session:
        await message.answer("–£ –≤–∞—Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞ —Å–µ—Å—Å–∏—è –Ω–æ—à–µ–Ω–∏—è —ç–ª–∞–π–Ω–µ—Ä–æ–≤.")
        return
    await WearSession.create(
        user=user,
        date=date.today(),
        start_time=datetime.now(),
        end_time=None,
        duration_seconds=None
    )
    await message.answer("–¢–∞–π–º–µ—Ä –Ω–æ—à–µ–Ω–∏—è —ç–ª–∞–π–Ω–µ—Ä–æ–≤ –∑–∞–ø—É—â–µ–Ω!")

@dp.message(Command("stop_wear"))
async def cmd_stop_wear(message: Message):
    if message.from_user is None:
        return
    telegram_id = message.from_user.id
    user = await User.filter(telegram_id=telegram_id).first()
    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start.")
        return
    open_session = await WearSession.filter(user=user, end_time=None).first()
    if not open_session:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –Ω–æ—à–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start_wear –¥–ª—è –∑–∞–ø—É—Å–∫–∞.")
        return
    end_time = datetime.now()
    # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∞–∏–≤–Ω–æ–º—É datetime –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    start_time = open_session.start_time.replace(tzinfo=None) if open_session.start_time.tzinfo else open_session.start_time
    duration = int((end_time - start_time).total_seconds())
    open_session.end_time = end_time
    open_session.duration_seconds = duration
    await open_session.save()
    await message.answer(f"–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration // 3600}—á {(duration % 3600) // 60}–º.")

@dp.message(Command("today"))
async def cmd_today(message: Message):
    if message.from_user is None:
        return
    telegram_id = message.from_user.id
    user = await User.filter(telegram_id=telegram_id).first()
    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start.")
        return
    today = date.today()
    sessions = await WearSession.filter(user=user, date=today).all()
    total_seconds = sum(s.duration_seconds or int((datetime.now() - (s.start_time.replace(tzinfo=None) if s.start_time.tzinfo else s.start_time)).total_seconds()) for s in sessions)
    total_hours = total_seconds / 3600
    percent = int((total_hours / user.daily_goal_hours) * 100) if user.daily_goal_hours else 0
    left = max(0, user.daily_goal_hours - total_hours)
    text = (
        f"–°–µ–≥–æ–¥–Ω—è –≤—ã –Ω–æ—Å–∏–ª–∏ —ç–ª–∞–π–Ω–µ—Ä—ã {total_hours:.1f} —á ({percent}% –æ—Ç —Ü–µ–ª–∏ {user.daily_goal_hours} —á).\n"
        f"–û—Å—Ç–∞–ª–æ—Å—å –¥–æ —Ü–µ–ª–∏: {left:.1f} —á.\n\n"
        f"–°–µ—Å—Å–∏–∏ –∑–∞ –¥–µ–Ω—å:\n"
    )
    for s in sessions:
        st = s.start_time.strftime('%H:%M')
        et = s.end_time.strftime('%H:%M') if s.end_time else '...'
        dur = (s.duration_seconds or int((datetime.now() - (s.start_time.replace(tzinfo=None) if s.start_time.tzinfo else s.start_time)).total_seconds())) // 60
        text += f"{st} ‚Äî {et} ({dur} –º–∏–Ω)\n"
    if total_hours >= user.daily_goal_hours:
        text += "\n–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –ø–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!"
    elif percent >= 80:
        text += "\n–ü–æ—á—Ç–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ —Ü–µ–ª–∏! –ï—â—ë –Ω–µ–º–Ω–æ–≥–æ ‚Äî –∏ –≤—ã –º–æ–ª–æ–¥–µ—Ü!"
    else:
        text += "\n–°–µ–≥–æ–¥–Ω—è –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–ª–∞–Ω. –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ! –ó–∞–≤—Ç—Ä–∞ –Ω–æ–≤—ã–π –¥–µ–Ω—å. –ì–ª–∞–≤–Ω–æ–µ ‚Äî –Ω–µ —Å–¥–∞–≤–∞—Ç—å—Å—è!"
    await message.answer(text)

@dp.message(Command("help"))
async def cmd_help(message: Message):
    help_text = (
        "ü§ñ <b>–≠–ª–∞–π–Ω–µ—Ä–ö–æ–Ω—Ç—Ä–æ–ª—å - –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ –ª–µ—á–µ–Ω–∏–∏</b>\n\n"
        "<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "üü¢ –ù–∞—á–∞—Ç—å –Ω–æ—à–µ–Ω–∏–µ - –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä\n"
        "üî¥ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ—à–µ–Ω–∏–µ - –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é\n"
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ–≥–æ–¥–Ω—è - –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ –¥–µ–Ω—å\n"
        "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é - –æ–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
        "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–µ—á–µ–Ω–∏–∏\n"
        "üîÑ –°–º–µ–Ω–∏—Ç—å –∫–∞–ø–ø—É - –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —ç–ª–∞–π–Ω–µ—Ä\n"
        "üí° –°–æ–≤–µ—Ç—ã - –ø–æ–ª–µ–∑–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
        "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞ - —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–Ω–∏–∫–æ–π\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–¥–æ–±–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏!"
    )
    await message.answer(help_text, reply_markup=get_main_keyboard(), parse_mode="HTML")

@dp.callback_query()
async def handle_callback(callback: types.CallbackQuery):
    if callback.message is None:
        await callback.answer("–û—à–∏–±–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
        return
        
    if callback.data == "main_menu":
        await callback.message.answer(
            "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_keyboard(),
            parse_mode="HTML"
        )
    elif callback.data == "start_wear":
        await handle_start_wear_callback(callback)
    elif callback.data == "stop_wear":
        await handle_stop_wear_callback(callback)
    elif callback.data == "today":
        await handle_today_callback(callback)
    elif callback.data == "stats":
        await handle_stats_callback(callback)
    elif callback.data == "profile":
        await handle_profile_callback(callback)
    elif callback.data == "next":
        await handle_next_callback(callback)
    elif callback.data == "tips":
        await handle_tips_callback(callback)
    elif callback.data == "help":
        await handle_help_callback(callback)
    elif callback.data == "support":
        await handle_support_callback(callback)
    
    await callback.answer()

async def handle_start_wear_callback(callback: types.CallbackQuery):
    if callback.from_user is None or callback.message is None:
        return
    telegram_id = callback.from_user.id
    user = await User.filter(telegram_id=telegram_id).first()
    if not user:
        await callback.message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start.")
        return
    open_session = await WearSession.filter(user=user, end_time=None).first()
    if open_session:
        await callback.message.answer("‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞ —Å–µ—Å—Å–∏—è –Ω–æ—à–µ–Ω–∏—è —ç–ª–∞–π–Ω–µ—Ä–æ–≤.")
        return
    await WearSession.create(
        user=user,
        date=date.today(),
        start_time=datetime.now(),
        end_time=None,
        duration_seconds=None
    )
    await callback.message.answer(
        "üü¢ <b>–¢–∞–π–º–µ—Ä –Ω–æ—à–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω!</b>\n\n"
        "–≠–ª–∞–π–Ω–µ—Ä—ã –Ω–∞–¥–µ—Ç—ã. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä, –∫–æ–≥–¥–∞ —Å–Ω–∏–º–µ—Ç–µ –∏—Ö.",
        reply_markup=get_wear_keyboard(),
        parse_mode="HTML"
    )

async def handle_stop_wear_callback(callback: types.CallbackQuery):
    if callback.from_user is None or callback.message is None:
        return
    telegram_id = callback.from_user.id
    user = await User.filter(telegram_id=telegram_id).first()
    if not user:
        await callback.message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start.")
        return
    open_session = await WearSession.filter(user=user, end_time=None).first()
    if not open_session:
        await callback.message.answer("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –Ω–æ—à–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ù–∞—á–∞—Ç—å –Ω–æ—à–µ–Ω–∏–µ'.")
        return
    end_time = datetime.now()
    start_time = open_session.start_time.replace(tzinfo=None) if open_session.start_time.tzinfo else open_session.start_time
    duration = int((end_time - start_time).total_seconds())
    open_session.end_time = end_time
    open_session.duration_seconds = duration
    await open_session.save()
    
    hours = duration // 3600
    minutes = (duration % 3600) // 60
    
    await callback.message.answer(
        f"üî¥ <b>–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
        f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {hours}—á {minutes}–º\n"
        f"‚úÖ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ù–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞–¥–µ—Ç—å —ç–ª–∞–π–Ω–µ—Ä—ã —Å–Ω–æ–≤–∞.",
        reply_markup=get_main_keyboard(),
        parse_mode="HTML"
    )

async def handle_today_callback(callback: types.CallbackQuery):
    if callback.from_user is None or callback.message is None:
        return
    telegram_id = callback.from_user.id
    user = await User.filter(telegram_id=telegram_id).first()
    if not user:
        await callback.message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start.")
        return
    today = date.today()
    sessions = await WearSession.filter(user=user, date=today).all()
    total_seconds = sum(s.duration_seconds or int((datetime.now() - (s.start_time.replace(tzinfo=None) if s.start_time.tzinfo else s.start_time)).total_seconds()) for s in sessions)
    total_hours = total_seconds / 3600
    percent = int((total_hours / user.daily_goal_hours) * 100) if user.daily_goal_hours else 0
    left = max(0, user.daily_goal_hours - total_hours)
    
    # –°–æ–∑–¥–∞—ë–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    progress_bar = "‚ñà" * (percent // 10) + "‚ñë" * (10 - percent // 10)
    
    text = (
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è</b>\n\n"
        f"‚è±Ô∏è –í—Ä–µ–º—è –Ω–æ—à–µ–Ω–∏—è: <b>{total_hours:.1f}—á</b> ({percent}% –æ—Ç —Ü–µ–ª–∏ {user.daily_goal_hours}—á)\n"
        f"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: [{progress_bar}] {percent}%\n"
        f"üéØ –û—Å—Ç–∞–ª–æ—Å—å –¥–æ —Ü–µ–ª–∏: <b>{left:.1f}—á</b>\n\n"
    )
    
    if sessions:
        text += "üìã <b>–°–µ—Å—Å–∏–∏ –∑–∞ –¥–µ–Ω—å:</b>\n"
        for s in sessions:
            st = s.start_time.strftime('%H:%M')
            et = s.end_time.strftime('%H:%M') if s.end_time else '...'
            dur = (s.duration_seconds or int((datetime.now() - (s.start_time.replace(tzinfo=None) if s.start_time.tzinfo else s.start_time)).total_seconds())) // 60
            text += f"üïê {st} ‚Äî {et} ({dur} –º–∏–Ω)\n"
    
    if total_hours >= user.daily_goal_hours:
        text += "\nüéâ <b>–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –ø–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è!</b>"
    elif percent >= 80:
        text += "\nüëç –ü–æ—á—Ç–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ —Ü–µ–ª–∏! –ï—â—ë –Ω–µ–º–Ω–æ–≥–æ ‚Äî –∏ –≤—ã –º–æ–ª–æ–¥–µ—Ü!"
    else:
        text += "\nüí™ –°–µ–≥–æ–¥–Ω—è –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–ª–∞–Ω. –ó–∞–≤—Ç—Ä–∞ –Ω–æ–≤—ã–π –¥–µ–Ω—å!"
    
    await callback.message.answer(text, reply_markup=get_main_keyboard(), parse_mode="HTML")

async def handle_stats_callback(callback: types.CallbackQuery):
    if callback.from_user is None or callback.message is None:
        return
    telegram_id = callback.from_user.id
    user = await User.filter(telegram_id=telegram_id).first()
    if not user:
        await callback.message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start.")
        return
    from datetime import timedelta
    days = 7
    today = date.today()
    stats = []
    days_with_goal = 0
    total_hours = 0
    for i in range(days):
        d = today - timedelta(days=i)
        sessions = await WearSession.filter(user=user, date=d).all()
        day_seconds = sum(s.duration_seconds or 0 for s in sessions)
        day_hours = day_seconds / 3600
        total_hours += day_hours
        if day_hours >= user.daily_goal_hours:
            days_with_goal += 1
        stats.append((d, day_hours))
    stats.reverse()
    avg_hours = total_hours / days
    percent_goal = int((days_with_goal / days) * 100)
    
    text = (
        f"üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π</b>\n\n"
        f"üìä –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–æ—à–µ–Ω–∏—è: <b>{avg_hours:.1f}—á/–¥–µ–Ω—å</b>\n"
        f"‚úÖ –î–Ω–µ–π —Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º —Ü–µ–ª–∏: <b>{days_with_goal} –∏–∑ {days}</b> ({percent_goal}%)\n\n"
        f"üìÖ <b>–ü–æ –¥–Ω—è–º:</b>\n"
    )
    for d, h in stats:
        emoji = "‚úÖ" if h >= user.daily_goal_hours else "‚ö†Ô∏è" if h > 0 else "‚ùå"
        text += f"{emoji} {d.strftime('%d.%m')}: <b>{h:.1f}—á</b>\n"
    
    await callback.message.answer(text, reply_markup=get_main_keyboard(), parse_mode="HTML")

async def handle_profile_callback(callback: types.CallbackQuery):
    if callback.from_user is None or callback.message is None:
        return
    telegram_id = callback.from_user.id
    user = await User.filter(telegram_id=telegram_id).first()
    if not user:
        await callback.message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start.")
        return
    text = (
        f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
        f"üìù –ò–º—è: <b>{user.name or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}</b>\n"
        f"ü¶∑ –ù–æ–º–µ—Ä —ç–ª–∞–π–Ω–µ—Ä–∞: <b>‚Ññ{user.current_aligner_number}</b>\n"
        f"üìÖ –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–º–µ–Ω—ã: <b>{user.last_aligner_change_date}</b>\n"
        f"üîÑ –ì—Ä–∞—Ñ–∏–∫ —Å–º–µ–Ω—ã: <b>{user.aligner_change_interval_days} –¥–Ω–µ–π</b>\n"
        f"üéØ –¶–µ–ª—å –ø–æ –Ω–æ—à–µ–Ω–∏—é: <b>{user.daily_goal_hours}—á/—Å—É—Ç–∫–∏</b>\n\n"
        f"üí° –ò–º—è –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
    )
    await callback.message.answer(text, reply_markup=get_main_keyboard(), parse_mode="HTML")

async def handle_next_callback(callback: types.CallbackQuery):
    if callback.from_user is None or callback.message is None:
        return
    telegram_id = callback.from_user.id
    user = await User.filter(telegram_id=telegram_id).first()
    if not user:
        await callback.message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start.")
        return
    user.current_aligner_number += 1
    user.last_aligner_change_date = date.today()
    await user.save()
    await callback.message.answer(
        f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–µ—Ä–µ—Ö–æ–¥–æ–º –Ω–∞ –Ω–æ–≤—ã–π —ç–ª–∞–π–Ω–µ—Ä!</b>\n\n"
        f"ü¶∑ –¢–µ–ø–µ—Ä—å —É –≤–∞—Å —ç–ª–∞–π–Ω–µ—Ä <b>‚Ññ{user.current_aligner_number}</b>\n"
        f"üìÖ –î–∞—Ç–∞ —Å–º–µ–Ω—ã: <b>{user.last_aligner_change_date}</b>\n\n"
        f"üí™ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!",
        reply_markup=get_main_keyboard(),
        parse_mode="HTML"
    )

async def handle_tips_callback(callback: types.CallbackQuery):
    if callback.message is None:
        return
    import random
    tips = [
        "üí° <b>–ù–æ—Å–∏—Ç–µ —ç–ª–∞–π–Ω–µ—Ä—ã –Ω–µ –º–µ–Ω–µ–µ 22 —á–∞—Å–æ–≤ –≤ —Å—É—Ç–∫–∏</b> –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞ –ª–µ—á–µ–Ω–∏—è.",
        "üçΩÔ∏è <b>–°–Ω–∏–º–∞–π—Ç–µ —ç–ª–∞–π–Ω–µ—Ä—ã —Ç–æ–ª—å–∫–æ –≤–æ –≤—Ä–µ–º—è –µ–¥—ã –∏ —á–∏—Å—Ç–∫–∏ –∑—É–±–æ–≤</b> - —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –±—ã—Å—Ç—Ä–µ–µ –¥–æ—Å—Ç–∏—á—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.",
        "üßº <b>–û—á–∏—â–∞–π—Ç–µ —ç–ª–∞–π–Ω–µ—Ä—ã –µ–∂–µ–¥–Ω–µ–≤–Ω–æ</b> –º—è–≥–∫–æ–π —â—ë—Ç–∫–æ–π –∏ —Ç—ë–ø–ª–æ–π –≤–æ–¥–æ–π –¥–ª—è –≥–∏–≥–∏–µ–Ω—ã.",
        "üìÖ <b>–ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –º–µ–Ω—è—Ç—å —ç–ª–∞–π–Ω–µ—Ä—ã</b> —Å–æ–≥–ª–∞—Å–Ω–æ –≥—Ä–∞—Ñ–∏–∫—É, –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–º—É –≤—Ä–∞—á–æ–º.",
        "‚ö†Ô∏è <b>–ï—Å–ª–∏ —ç–ª–∞–π–Ω–µ—Ä—ã –Ω–∞—Ç–∏—Ä–∞—é—Ç</b> - –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤—Ä–∞—á—É, –Ω–µ —Ç–µ—Ä–ø–∏—Ç–µ –¥–∏—Å–∫–æ–º—Ñ–æ—Ä—Ç.",
        "üíß <b>–ü–µ–π—Ç–µ –≤–æ–¥—É —Å —ç–ª–∞–π–Ω–µ—Ä–∞–º–∏</b>, –Ω–æ –∏–∑–±–µ–≥–∞–π—Ç–µ —Å–ª–∞–¥–∫–∏—Ö –∏ –≥–æ—Ä—è—á–∏—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤."
    ]
    tip = random.choice(tips)
    await callback.message.answer(
        f"üí° <b>–ü–æ–ª–µ–∑–Ω—ã–π —Å–æ–≤–µ—Ç</b>\n\n{tip}",
        reply_markup=get_main_keyboard(),
        parse_mode="HTML"
    )

async def handle_help_callback(callback: types.CallbackQuery):
    if callback.message is None:
        return
    help_text = (
        "ü§ñ <b>–≠–ª–∞–π–Ω–µ—Ä–ö–æ–Ω—Ç—Ä–æ–ª—å - –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ –ª–µ—á–µ–Ω–∏–∏</b>\n\n"
        "<b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n"
        "üü¢ <b>–ù–∞—á–∞—Ç—å –Ω–æ—à–µ–Ω–∏–µ</b> - –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä\n"
        "üî¥ <b>–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ—à–µ–Ω–∏–µ</b> - –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é\n"
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ–≥–æ–¥–Ω—è</b> - –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ –¥–µ–Ω—å\n"
        "üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é</b> - –æ–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
        "üë§ <b>–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å</b> - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–µ—á–µ–Ω–∏–∏\n"
        "üîÑ <b>–°–º–µ–Ω–∏—Ç—å –∫–∞–ø–ø—É</b> - –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —ç–ª–∞–π–Ω–µ—Ä\n"
        "üí° <b>–°–æ–≤–µ—Ç—ã</b> - –ø–æ–ª–µ–∑–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
        "üìû <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞</b> - —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–Ω–∏–∫–æ–π\n\n"
        "üí™ <b>–†–µ–≥—É–ª—è—Ä–Ω–æ–µ –Ω–æ—à–µ–Ω–∏–µ —ç–ª–∞–π–Ω–µ—Ä–æ–≤ - –∑–∞–ª–æ–≥ —É—Å–ø–µ—à–Ω–æ–≥–æ –ª–µ—á–µ–Ω–∏—è!</b>"
    )
    await callback.message.answer(help_text, reply_markup=get_main_keyboard(), parse_mode="HTML")

async def handle_support_callback(callback: types.CallbackQuery):
    if callback.message is None:
        return
    await callback.message.answer(
        "üìû <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞</b>\n\n"
        "üè• <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã –∫–ª–∏–Ω–∏–∫–∏:</b>\n"
        "üì± –¢–µ–ª–µ—Ñ–æ–Ω: +7 900 000-00-00\n"
        "üìß Email: support@alignerclinic.ru\n\n"
        "üí¨ –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ —Å—é–¥–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É.\n\n"
        "‚è∞ <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> –ü–Ω-–ü—Ç 9:00-18:00",
        reply_markup=get_main_keyboard(),
        parse_mode="HTML"
    )

@dp.message(Command("tips"))
async def cmd_tips(message: Message):
    import random
    tips = [
        "–ù–æ—Å–∏—Ç–µ —ç–ª–∞–π–Ω–µ—Ä—ã –Ω–µ –º–µ–Ω–µ–µ 22 —á–∞—Å–æ–≤ –≤ —Å—É—Ç–∫–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞.",
        "–°–Ω–∏–º–∞–π—Ç–µ —ç–ª–∞–π–Ω–µ—Ä—ã —Ç–æ–ª—å–∫–æ –≤–æ –≤—Ä–µ–º—è –µ–¥—ã –∏ —á–∏—Å—Ç–∫–∏ –∑—É–±–æ–≤.",
        "–û—á–∏—â–∞–π—Ç–µ —ç–ª–∞–π–Ω–µ—Ä—ã –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –º—è–≥–∫–æ–π —â—ë—Ç–∫–æ–π –∏ —Ç—ë–ø–ª–æ–π –≤–æ–¥–æ–π.",
        "–ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –º–µ–Ω—è—Ç—å —ç–ª–∞–π–Ω–µ—Ä—ã —Å–æ–≥–ª–∞—Å–Ω–æ –≥—Ä–∞—Ñ–∏–∫—É.",
        "–ï—Å–ª–∏ —ç–ª–∞–π–Ω–µ—Ä—ã –Ω–∞—Ç–∏—Ä–∞—é—Ç ‚Äî –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤—Ä–∞—á—É, –Ω–µ —Ç–µ—Ä–ø–∏—Ç–µ –¥–∏—Å–∫–æ–º—Ñ–æ—Ä—Ç.",
        "–ü–µ–π—Ç–µ –≤–æ–¥—É —Å —ç–ª–∞–π–Ω–µ—Ä–∞–º–∏, –Ω–æ –∏–∑–±–µ–≥–∞–π—Ç–µ —Å–ª–∞–¥–∫–∏—Ö –∏ –≥–æ—Ä—è—á–∏—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤."
    ]
    await message.answer(random.choice(tips))

@dp.message(Command("support"))
async def cmd_support(message: Message):
    await message.answer("–ö–æ–Ω—Ç–∞–∫—Ç—ã –∫–ª–∏–Ω–∏–∫–∏: +7 900 000-00-00, email: support@alignerclinic.ru\n–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ —Å—é–¥–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É.")

@dp.message(Command("next"))
async def cmd_next(message: Message):
    if message.from_user is None:
        return
    telegram_id = message.from_user.id
    user = await User.filter(telegram_id=telegram_id).first()
    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start.")
        return
    user.current_aligner_number += 1
    user.last_aligner_change_date = date.today()
    await user.save()
    await message.answer(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å —ç–ª–∞–π–Ω–µ—Ä ‚Ññ{user.current_aligner_number}.")

@dp.message(Command("stats"))
async def cmd_stats(message: Message):
    if message.from_user is None:
        return
    telegram_id = message.from_user.id
    user = await User.filter(telegram_id=telegram_id).first()
    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start.")
        return
    from datetime import timedelta
    days = 7
    today = date.today()
    stats = []
    days_with_goal = 0
    total_hours = 0
    for i in range(days):
        d = today - timedelta(days=i)
        sessions = await WearSession.filter(user=user, date=d).all()
        day_seconds = sum(s.duration_seconds or 0 for s in sessions)
        day_hours = day_seconds / 3600
        total_hours += day_hours
        if day_hours >= user.daily_goal_hours:
            days_with_goal += 1
        stats.append((d, day_hours))
    stats.reverse()
    avg_hours = total_hours / days
    percent_goal = int((days_with_goal / days) * 100)
    text = (
        f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π:\n"
        f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–æ—à–µ–Ω–∏—è: {avg_hours:.1f} —á/–¥–µ–Ω—å\n"
        f"–î–Ω–µ–π —Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º —Ü–µ–ª–∏: {days_with_goal} –∏–∑ {days} ({percent_goal}%)\n\n"
        f"–î–µ–Ω—å         –ß–∞—Å—ã\n"
    )
    for d, h in stats:
        text += f"{d.strftime('%d.%m')}:   {h:.1f}\n"
    await message.answer(text)

async def main():
    logger.info("Starting bot...")
    await init_db()
    logger.info("Database initialized")
    import asyncio
    asyncio.create_task(reminders_worker(bot))
    logger.info("Starting polling...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
